tosca_definitions_version: tosca_simple_yaml_1_3

capability_types:

  sodalite.capabilities.modak.JobOptions:
    derived_from: tosca.capabilities.Root

  sodalite.capabilities.modak.Application:
    derived_from: tosca.capabilities.Root

  sodalite.capabilities.modak.ApplicationBuild:
    derived_from: tosca.capabilities.Root
    
  sodalite.capabilities.modak.Target:
    derived_from: tosca.capabilities.Root
    
  sodalite.capabilities.modak.Optimization:
    derived_from: tosca.capabilities.Root
    

node_types:

  # here we can have the playbook that directly interfaces MODAK (src/docker)
  # and then proceed with the normal job workflow from HPC examples
  sodalite.nodes.modak.job:
    derived_from: tosca.nodes.Root
    properties:
      artifact_name:
        type: string
      artifact_url:
        type: string
    dependencies:
      - job_options:
          node: sodalite.nodes.modak.job_options
          capability: sodalite.capabilities.modak.JobOptions
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, 1 ]
      - application:
          node: sodalite.nodes.modak.application
          capability: sodalite.capabilities.modak.Application
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, 1 ]
      - target:
          node: sodalite.nodes.modak.target
          capability: sodalite.capabilities.modak.Target
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, 1 ]
      - optimization:
          node: sodalite.nodes.modak.optimization
          capability: sodalite.capabilities.modak.Optimization
          relationship: tosca.relationships.DependsOn
          occurrences: [ 0, 1 ]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              # job_options properties
              job_name: { default: { get_property: [SELF, job_options, job_name] } }
              account: { default: { get_property: [SELF, job_options, account] } }
              queue: { default: { get_property: [SELF, job_options, queue] } }
              wall_time_limit: { default: { get_property: [SELF, job_options, wall_time_limit] } }
              node_count: { default: { get_property: [SELF, job_options, node_count] } }
              core_count: { default: { get_property: [SELF, job_options, core_count] } }
              process_count_per_node: { default: { get_property: [SELF, job_options, process_count_per_node] } }
              core_count_per_process: { default: { get_property: [SELF, job_options, core_count_per_process] } }
              memory_limit: { default: { get_property: [SELF, job_options, memory_limit] } }
              minimum_memory_per_processor: { default: { get_property: [SELF, job_options, minimum_memory_per_processor] } }
              request_gpus: { default: { get_property: [SELF, job_options, request_gpus] } }
              request_specific_nodes: { default: { get_property: [SELF, job_options, request_specific_nodes] } }
              job_array: { default: { get_property: [SELF, job_options, job_array] } }
              standard_output_file: { default: { get_property: [SELF, job_options, standard_output_file] } }
              standard_error_file: { default: { get_property: [SELF, job_options, standard_error_file] } }
              combine_stdout_stderr: { default: { get_property: [SELF, job_options, combine_stdout_stderr] } }
              architecture_constraint: { default: { get_property: [SELF, job_options, architecture_constraint] } }
              copy_environment: { default: { get_property: [SELF, job_options, copy_environment] } }
              copy_environment_variable: { default: { get_property: [SELF, job_options, copy_environment_variable] } }
              job_dependency: { default: { get_property: [SELF, job_options, job_dependency] } }
              request_event_notification: { default: { get_property: [SELF, job_options, request_event_notification] } }
              email_address: { default: { get_property: [SELF, job_options, email_address] } }
              defer_job: { default: { get_property: [SELF, job_options, defer_job] } }
              node_exclusive: { default: { get_property: [SELF, job_options, node_exclusive] } }
              # application properties
              app_tag: { default: { get_property: [SELF, application, app_tag] } }
              container_runtime: { default: { get_property: [SELF, application, container_runtime] } }
              app_type: { default: { get_property: [SELF, application, app_type] } }
              executable: { default: { get_property: [SELF, application, executable] } }
              arguments: { default: { get_property: [SELF, application, arguments] } }
              mpi_ranks: { default: { get_property: [SELF, application, mpi_ranks] } }
              threads: { default: { get_property: [SELF, application, threads] } }
              # target properties
              name: { default: { get_property: [SELF, target, name] } }
              queue_type: { default: { get_property: [SELF, target, queue_type] } }
            implementation: 
              primary: playbooks/create-modak-job.yml


  sodalite.nodes.modak.job_options:
    derived_from: tosca.nodes.Root
    properties:
      job_name:
        type: string
      account:
        type: string
        required: false
      queue:
        type: string
      wall_time_limit:
        type: string
      node_count:
        type: integer
      core_count:
        type: integer
      process_count_per_node:
        type: integer
        required: false
      core_count_per_process:
        type: integer
        required: false
      memory_limit:
        type: scalar-unit.size
        required: false
      minimum_memory_per_processor:
        type: scalar-unit.size
        required: false
      request_gpus:
        type: integer
        required: false
      request_specific_nodes:
        type: string
        required: false
      job_array:
        type: string
        required: false
      standard_output_file:
        type: string
      standard_error_file:
        type: string
      combine_stdout_stderr:
        type: boolean
      architecture_constraint:
        type: string
        required: false
      copy_environment:
        type: boolean
        required: false
      copy_environment_variable:
        type: string
        required: false
      job_dependency:
        type: string
        required: false
      request_event_notification:
        type: string
        required: false
      email_address:
        type: string
        required: false
      defer_job:
        type: string
        required: false
      node_exclusive:
        type: boolean
        required: false
    capabilities:
      job_options:
        type: sodalite.capabilities.modak.JobOptions
        valid_source_types: [ sodalite.nodes.modak.job ]

  sodalite.nodes.modak.application.build:
    derived_from: tosca.nodes.Root
    properties:
      source:
        type: string
      build_command:
        type: string
    capabilities:
      build:
        type: sodalite.capabilities.modak.ApplicationBuild
        valid_source_types: [ sodalite.nodes.modak.application ]

  sodalite.nodes.modak.application:
    derived_from: tosca.nodes.Root
    properties:
      app_tag:
        type: string
      container_runtime:
        type: string
      app_type:
        type: string
      executable:
        type: string
      arguments:
        type: string
      mpi_ranks:
        type: integer
        required: false
      threads:
        type: integer
        required: false
    capabilities:
      application:
        type: sodalite.capabilities.modak.Application
        valid_source_types: [ sodalite.nodes.modak.job ]
    requirements:
      - build:
          node: sodalite.nodes.modak.application.build
          capability: sodalite.capabilities.modak.ApplicationBuild
          relationship: tosca.relationships.DependsOn
          occurrences: [ 0, UNBOUNDED ]
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              # application properties
              app_tag: { default: { get_property: [SELF, app_tag] } }
              container_runtime: { default: { get_property: [SELF, container_runtime] } }
              app_type: { default: { get_property: [SELF, app_type] } }
              executable: { default: { get_property: [SELF, executable] } }
              arguments: { default: { get_property: [SELF, arguments] } }
              mpi_ranks: { default: { get_property: [SELF, mpi_ranks] } }
              threads: { default: { get_property: [SELF, threads] } }
              # build properties
              source: { default: { get_property: [SELF, build, source] } }
              build_command: { default: { get_property: [SELF, build, build_command] } }
            implementation: 
              primary: playbooks/create-application-build.yml

  sodalite.nodes.modak.target:
    derived_from: tosca.nodes.Root
    properties:
      name:
        type: string
      queue_type:
        type: string
    capabilities:
      target:
        type: sodalite.capabilities.modak.Target
        valid_source_types: [ sodalite.nodes.modak.job ]

  # It is part of Optimization DSL
  # It is here for completeness
  sodalite.nodes.modak.optimization:
    derived_from: tosca.nodes.Root
    capabilities:
      optimization:
        type: sodalite.capabilities.modak.Optimization
        valid_source_types: [ sodalite.nodes.modak.job ]
