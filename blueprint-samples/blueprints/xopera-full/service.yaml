tosca_definitions_version: tosca_simple_yaml_1_0

node_types:
  xOpera.nodes.VM.OpenStack:
    derived_from: tosca.nodes.Compute
    properties:
      name:
        type: string
        description: Name that should be given to the VM in OpenStack
      image:
        type: string
        description: OpenStack image id (image names are not accepted)
      flavor:
        type: string
        description: OpenStack flavor id (flavor names are not accepted)
      network:
        type: string
        description: OpenStack network id (network names are not accepted)
      security_groups:
        type: string
        description: OpenStack names of the security groups to which the instance should be added.Comma separated string.
      key_name:
        type: string
        description: OpenStack SSH key name that should be placed on the VM
    attributes:
      id:
        type: string
        description: OpenStack id of the VM
      private_address:
        type: string
        description: Private ipv4
      public_address:
        type: string
        description: Public ipv4
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs:
            vm_name:  { default: { get_property: [ SELF, name     ] } }
            image:    { default: { get_property: [ SELF, image    ] } }
            flavor:   { default: { get_property: [ SELF, flavor   ] } }
            network:  { default: { get_property: [ SELF, network  ] } }
            security_groups:  { default: { get_property: [ SELF, security_groups  ] } }
            key_name: { default: { get_property: [ SELF, key_name ] } }
          implementation: playbooks/vm/create.yml
        delete:
          inputs:
            id: { default: { get_attribute: [ SELF, id ] } }
          implementation: playbooks/vm/delete.yml
    capabilities:
      registry:
        type: tosca.capabilities.Compute
        valid_source_types: [xOpera.nodes.Docker.xOperaREST]
      database:
        type: tosca.capabilities.SoftwareComponent
        valid_source_types: [xOpera.nodes.Docker.xOperaREST]

  xOpera.nodes.Docker.xOperaREST:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      host_name:
        type: string
        description: Host name
      image:
        type: string
        description: Docker image name
      expose_port:
        type: string
        description: Port to be exposed
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs:
            network:  { default: { get_attribute: [ SELF, host, network ] } }
            public_ipv4_address: { default:  { get_attribute: [ SELF, host, public_address ] } }
            registry_ip: { default:  { get_attribute: [ SELF, registry, public_address ] } }
            database_ip: { default:  { get_attribute: [ SELF, database, public_address ] } }
            host_name: { default: { get_property: [ SELF, host_name ] } }
            image:  { default: { get_property: [ SELF, image ] } }
            expose_port:  { default: { get_property: [ SELF, expose_port ] } }
          implementation:
            primary: playbooks/docker/xopera/install.yml
        delete:
          inputs:
            registry_ip: { default:  { get_attribute: [ SELF, registry, public_address ] } }
          implementation:
            primary: playbooks/docker/xopera/uninstall.yml
    requirements:
      - registry:
          capability: tosca.capabilities.Compute
          relationship: tosca.relationships.DependsOn
      - database:
          capability: tosca.capabilities.Compute
          relationship: tosca.relationships.DependsOn
      - docker_image:
          capability: tosca.nodes.SoftwareComponent
          relationship: tosca.relationships.DependsOn

  xOpera.nodes.Docker.Registry:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      host_name:
        type: string
        description: Host name
      image:
        type: string
        description: Docker image name
      expose_port:
        type: string
        description: Port to be exposed
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs:
            network:  { default: { get_attribute: [ SELF, host, network ] } }
            public_ipv4_address: { default:  { get_attribute: [ SELF, host, public_address ] } }
            host_name: { default: { get_property: [ SELF, host_name ] } }
            image:  { default: { get_property: [ SELF, image ] } }
            expose_port:  { default: { get_property: [ SELF, expose_port ] } }
          implementation:
            primary: playbooks/docker/registry/install.yml
        delete:
          inputs:
            host_name: { default: { get_property: [ SELF, host_name ] } }
            public_ipv4_address: { default:  { get_attribute: [ SELF, host, public_address ] } }
          implementation:
            primary: playbooks/docker/registry/uninstall.yml

  xOpera.nodes.Docker.PostgreSQL:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      host_name:
        type: string
        description: Host name
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs:
            host_name: { default: { get_property: [ SELF, host_name ] } }
          implementation:
            primary: playbooks/docker/postgresql/install.yml
        delete:
          inputs:
            host_name: { default: { get_property: [ SELF, host_name ] } }
          implementation:
            primary: playbooks/docker/postgresql/uninstall.yml

  xOpera.nodes.Docker.Load.Image:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      image_name:
        type: string
        description: Docker image name
      archive_name:
        type: string
        description: Docker archive name (with .tar extension)
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          inputs:
            image_name: { default: { get_property: [ SELF, image_name ] } }
            archive_name: { default: { get_property: [ SELF, archive_name ] } }
            registry_ip: { default:  { get_attribute: [ SELF, host, public_address ] } }
          implementation:
            primary: playbooks/docker/registry/load.yml
        delete:
          inputs:
            image_name: { default: { get_property: [ SELF, image_name ] } }
          implementation:
            primary: playbooks/docker/registry/unload.yml
    capabilities:
      docker_image:
        type: tosca.nodes.SoftwareComponent
        valid_source_types: [xOpera.nodes.Docker.xOperaREST]

topology_template:
  node_templates:
    vm_postgresql:
      type: xOpera.nodes.VM.OpenStack
      properties:
        name: xOpera-postgresql
        image: centos7
        flavor: m1.medium
        network: orchestrator-net
        security_groups: default,sodalite-xopera-rest,sodalite-remote-access
        key_name: { get_input: xopera-key-name}

    vm_registry:
      type: xOpera.nodes.VM.OpenStack
      properties:
        name: xOpera-registry
        image: centos7
        flavor: m1.medium
        network: orchestrator-net
        security_groups: default,sodalite-xopera-rest,sodalite-remote-access
        key_name: { get_input: xopera-key-name}

    vm_rest:
      type: xOpera.nodes.VM.OpenStack
      properties:
        name: xOpera-rest
        image: centos7
        flavor: m1.medium
        network: orchestrator-net
        security_groups: default,sodalite-xopera-rest,sodalite-remote-access
        key_name: { get_input: xopera-key-name}

    docker_postgresql:
      type: xOpera.nodes.Docker.PostgreSQL
      requirements:
        - host: vm_postgresql
      properties:
        host_name: "postgresql"

    docker_registry:
      type: xOpera.nodes.Docker.Registry
      requirements:
        - host: vm_registry
      properties:
        host_name: "localregistry"
        image: "registry:2"
        expose_port: "443"
    docker_rest:
      type: xOpera.nodes.Docker.xOperaREST
      requirements:
        - host: vm_rest
        - registry: vm_registry
        - database: vm_postgresql
        - docker_image: docker_load_registry_image
      properties:
        host_name: "xopera"
        image: "xopera_rest"
        expose_port: "5000"

    docker_load_registry_image:
      type: xOpera.nodes.Docker.Load.Image
      requirements:
        - host: vm_registry
      properties:
        image_name: "xopera_rest"
        archive_name: "xopera_rest.tar"